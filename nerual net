import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms

# 如果gpu可用
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(device)
# 设置超参数
input_size = 784
hidden_size = 500
output_size = 10
num_epochs = 5
batch_size = 100
learning_rate = 0.001

# MNIST 下载，分为训练集和测试集共4个：训练图片，训练标签。测试图片，测试标签。即数据：图片。标签：图片对应的数字
train_dataset = torchvision.datasets.MNIST(root='./datam',
                                           train=True,
                                           transform=transforms.ToTensor(),
                                           download=True)

test_dataset = torchvision.datasets.MNIST(root='./datam',
                                          train=False,
                                          transform=transforms.ToTensor())

# 数据加载
train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                           batch_size=batch_size,
                                           shuffle=True)

test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                          batch_size=batch_size,
                                          shuffle=False)




class NeuralNet(nn.Module):
    def __init__(self,input_size,hidden_size,output_size):
        super(NeuralNet, self).__init__()
        self.fc1 = nn.Linear(input_size,hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size,output_size)

    def forward(self,x):
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)
        return out

model = NeuralNet(input_size, hidden_size, output_size).to(device)  # 类的实例化

print(model)
